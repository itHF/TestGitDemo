1.GL即Graphics Library，Low-Level Graphics Library；Graphic.DrawMesh()比GL更高效。
2.GL坐标系：GL坐标系原点位于屏幕左下方，X轴最大值为1，Y轴最大值为1。
3.GL立即绘制函数，只用当前material的设置。因此除非你显示指定mat，否则mat可以是任何材质，并且GL可能会改变材质。
4.GL是立即执行的，如果你在Update()里调用，它们将在相机渲染前执行，相机渲染将会清空屏幕，GL效果将无法看到。
5.关GL图像库的脚本需要绑定到Camera上，否则无法显示绘制的图像。
6.GL的线等基本图元并没有uv. 所有是没有贴图纹理影射的，shader里仅仅做的是单色计算或者对之前的影像加以处理。
7.GL所使用的shader里必须有Cull off指令，否则显示不完整
8.所有绘制相关的内容都必须写在OnPostRender()方法中。
 OnPostRender()：只有物体上有激活的摄像机时，才会调用的函数，当摄像机完成渲染场景，绘制了所有物体以后调用。OnPostRender可以变成co-routine,加yield语句即可。
9.GL图像库绘制2D图像的时候需要使用GL.LoadOrtho()方法来将图形映射到平面中。
 GL.LoadOrtho()：设置ortho perspective，即水平视角。After calling LoadOrtho, the viewing frustum goes from (0,0,-1) to (1,1,100). 主要用于在纯2D里绘制图元。
10.如果是线，设置颜色是GL.Color( new Color(1,1,1,0.5f) );如果设置GL.TRIANGLES或者是GL.QUADS,则颜色是shader里的颜色。
11.GL.PushMatrix()：保存matrices至matrix stack上。
  GL.PopMatrix()：从matrix stack上读取matrices。
  GL.LoadPixelMatrix()：改变MVP矩阵，使得transform里的xy 直接对应像素，(0，0)表示屏幕viewport的左下角，z的范围是(-1,1),该函数改变camera的参数，所以需要GL.PushMatrix()保存和GL.PopMatrix()读取。GL.Vertex3()的取值范围从左下角的(0,0,0) 至右上角的(Screen.width,Screen.height,0) 
12.GL.Vertex3()：的取值范围从左下角的(0,0,0) 至右上角的(1,1,0) 
13.WaitForEndOfFrame()：等待至所有绘制之后，就展示frame到屏幕之前，可以做截图或在任何物体上使用该函数。

14.屏幕画线(左下角到右上角)【已测】
  using UnityEngine;
  using System.Collections;
  public class GLTest : MonoBehaviour {
    public Material mat;
      void OnPostRender() {
          if (!mat) {
              Debug.LogError("Please Assign a material on the inspector");
              return;
          }
          GL.PushMatrix(); //保存当前Matirx
          mat.SetPass(0); //刷新当前材质
          GL.LoadPixelMatrix();//设置pixelMatrix
          GL.Color(Color.yellow);
          GL.Begin(GL.LINES);
          GL.Vertex3(0, 0, 0);
          GL.Vertex3(Screen.width, Screen.height, 0);
          GL.End();
          GL.PopMatrix();//读取之前的Matrix
      }
  }

15.截图
using System.IO;
using UnityEngine;
using System.Collections;
public class ScreenShot : MonoBehaviour {
    void Start() {
        StartCoroutine(UploadPNG());
    }
    IEnumerator UploadPNG() {
        yield return new WaitForEndOfFrame();
        int width = Screen.width;
        int height = Screen.height;
        Texture2D tex = new Texture2D(width, height, TextureFormat.RGB24, false);
        tex.ReadPixels(new Rect(0, 0, width, height), 0, 0);
        tex.Apply();
        byte[] bytes = tex.EncodeToPNG();
        File.WriteAllBytes(Application.dataPath+"/ss.png",bytes);
        UnityEditor.AssetDatabase.Refresh();
    }
}

16.展示Alpha
using UnityEngine;
using System.Collections;
public class GLTest : MonoBehaviour {
  public Shader shader;
  public Texture2D t2d;
  private Material mat;
  void Start() {
    mat = new Material(shader);
    mat.mainTexture = t2d;
  }
  void OnPostRender() {
    if (!mat) {
        Debug.LogError("Please Assign a material on the inspector");
        return;
    }
    GL.PushMatrix();
    mat.SetPass(0);
    GL.LoadOrtho();
    GL.Begin(GL.QUADS);
    GL.Vertex3(0, 0, 0.1F);
    GL.Vertex3(1f, 0, 0.1F);
    GL.Vertex3(1f, 1, 0.1F);
    GL.Vertex3(0, 1, 0.1F);
    GL.End();
    GL.PopMatrix();
  }
}

17.鼠标任意画线【已测】
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MouseDrawLine : MonoBehaviour {
    //绘制线段材质
    public Material material;
    private Dictionary<int, List<Vector3>> dicOfLine;
    List<Vector3> tempList;//临时线的点列表
    int index = -1;

    void Start() {
        dicOfLine = new Dictionary<int, List<Vector3>>();
    }

    void OnGUI() {
        GUILayout.Label("当前鼠标x轴位置：" + Input.mousePosition.x);
        GUILayout.Label("当前鼠标y轴位置：" + Input.mousePosition.y);
    }

    void Update() {
        if (Input.GetMouseButtonDown(0)) {
            index++;
            tempList = new List<Vector3>();//每次点击鼠标的时候都要实例化一个新的列表
        }

        if (Input.GetMouseButton(0)) {
            //将每次鼠标改变的位置存储进链表
            tempList.Add(Input.mousePosition);
        }

        if (Input.GetMouseButtonUp(0)) {
            if (tempList.Count < 2)//少于两个点的不添加 
           {
                index--;
            } else {
                dicOfLine.Add(index, tempList);
            }
        }
    }

    void OnPostRender() {
        if (!material) {
            return;
        }

        material.SetPass(0);
        GL.Color(Color.yellow);
        GL.LoadOrtho();
        GL.Begin(GL.LINES);
        int size = dicOfLine.Count;

        for (int i = 0; i < size; i++)//绘制之前画的线
        {
            List<Vector3> list = dicOfLine[i];
            int listLength = list.Count;
            for (int j = 0; j < listLength - 1; j++) {
                Vector3 start = list[j];
                Vector3 end = list[j + 1];
                DrawLine2D(start.x, start.y, end.x, end.y);
            }
        }

        if (tempList != null)//绘制当前正在画的内容
        {
            int currentLength = tempList.Count;
            for (int l = 0; l < currentLength - 1; l++) {
                Vector3 start = tempList[l];
                Vector3 end = tempList[l + 1];
                DrawLine2D(start.x, start.y, end.x, end.y);
            }
        }

        GL.End();
    }

    void DrawLine2D(float x1, float y1, float x2, float y2) {
        GL.Vertex3(x1 / Screen.width, y1 / Screen.height, 0);
        GL.Vertex3(x2 / Screen.width, y2 / Screen.height, 0);
    }
}

18.画线的橡皮条效果
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MouseDrawRubberLine : MonoBehaviour {
    public Material lineMaterial;
    Vector3[] tempLine;
    Dictionary<int, Vector3[]> dicOfLine;
    bool startDraw = false;
    int index;

    // Use this forinitialization
    void Start() {
        index = -1;
        dicOfLine = new Dictionary<int, Vector3[]>();
    }

    // Update iscalled once per frame
    void Update() {
        if (Input.GetMouseButtonDown(0)) {
            if (!startDraw) {
                startDraw = true;
            }

            if (startDraw) {
                tempLine = new Vector3[2];
                tempLine[0].x = Input.mousePosition.x;
                tempLine[0].y = Input.mousePosition.y;
            }
        }

        if (Input.GetMouseButton(0)) {
            if (startDraw) {
                tempLine[1].x = Input.mousePosition.x;
                tempLine[1].y = Input.mousePosition.y;
            }
        }

        if (Input.GetMouseButtonUp(0)) {
            if (startDraw)//一条线绘制完毕
            {
                if (tempLine.Length == 2) {
                    index++;
                    dicOfLine.Add(index, tempLine);
                }
            }
        }
    }

    void OnPostRender() {
        if (!lineMaterial) {
            return;
        }

        lineMaterial.SetPass(0);
        GL.LoadOrtho();
        GL.Color(Color.yellow);
        GL.Begin(GL.LINES);
        int size = dicOfLine.Count;

        for (int i = 0; i < size; i++) {
            Vector3[] line = dicOfLine[i];
            Vector3 start = line[0];
            Vector3 end = line[1];
            DrawLine2D(start.x, start.y, end.x, end.y);
        }

        if (tempLine != null) {
            Vector3 start = tempLine[0];
            Vector3 end = tempLine[1];
            DrawLine2D(start.x, start.y, end.x, end.y);
        }

        GL.End();
    }

    void DrawLine2D(float x1, float y1, float x2, float y2) {
        GL.Vertex(new Vector3(x1 / Screen.width, y1 / Screen.height, 0));
        GL.Vertex(new Vector3(x2 / Screen.width, y2 / Screen.height, 0));
    }
}



1.关于GL画线：
 Input.mousePosition取的是在屏幕上的像素点，采用GL.Vertex3(x,y,z)加入各顶点位置时：
 (1)未加载任何模式时，x,y,z代表的顶点是3D点，是场景中的某一个点；
 (2)加载像素矩阵时(GL.LoadPixelMatrix())，x,y,z代表的顶点是2D点，是一个像素点；
   GL.Vertex3(Input.mousePosition.x, Input.mousePosition.y, 0);
 (3)加载正交模式时(GL.LoadOrtho())，x,y,z代表的顶点是2D点，是位于屏幕上的比例点；
   GL.Vertex3(Input.mousePosition.x/Screen.width,Input.mousePosition.y/Screen.height,0);
 
 2.关于GL画多边形：
  点的顺序务必要按逆时针方向逐个画出
   